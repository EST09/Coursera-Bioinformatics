# Coursera-Bioinformatics

#Number of times pattern appears in text

def PatternCount(Pattern, Text):
    count = 0
    for i in range(len(Text)-len(Pattern)+1):
        if Text[i:i+len(Pattern)] == Pattern:
            count = count+1
    return count

#Create a count dictionary table for pattern count i.e. an array of how many times a kmer appears 

def CountDict(Text, k):
    Count = {}
    for i in range(len(Text)-k+1):
        Pattern = Text[i:i+k]
        Count[i] = PatternCount(Pattern, Text)
    return Count 

#Find maximum value in Count Dictionary

def max(list):
    m = list[0] 
    for item in list:
        if item > m: 
            m = item
    return m 

#Find the most frequent kmers

def FrequentWords(Text, k):
    FrequentPatterns = []
    Count = CountDict(Text, k)
    m = max(Count.values())
    for i in Count:
        if Count[i] == m:
            FrequentPatterns.append(Text[i:i+k])
    return FrequentPatterns  

#Find the most frequent kmers, removing duplicates

def FrequentWords(Text, k):
    FrequentPatterns = []
    Count = CountDict(Text, k)
    m = max(Count.values())
    for i in Count:
        if Count[i] == m:
            FrequentPatterns.append(Text[i:i+k])
    FrequentPatternsNoDuplicates = remove_duplicates(FrequentPatterns)
    return FrequentPatternsNoDuplicates   

# Input:  A list Items
# Output: A list containing all objects from Items without duplicates

def remove_duplicates(Items):
    ItemsNoDuplicates = [] # output variable
    ItemsNoDuplicates = set(Items)
    return ItemsNoDuplicates

def ReverseComplement(Pattern):
    dict = {'A':'T', 'C':'G', 'G':'C', 'T':'A'}
    revComp = ''
    for i in range(len(Pattern)):
        revComp = revComp + dict[Pattern[i]]
    revComp = revComp[::-1]
    return revComp

def PatternMatching(Pattern, Genome):
    positions = [] # output variable
    for i in range(len(Genome)-len(Pattern)+1):
        if Genome[i:i+len(Pattern)] == Pattern:
            positions.append(i)
    return positions

#Week 1.3

def PatternMatching(Pattern, Genome):
    positions = [] # output variable
    for i in range(len(Genome)-len(Pattern)+1):
        if Genome[i:i+len(Pattern)] == Pattern:
            positions.append(i)
    return positions

Pattern = "GAAGGCTGA"
Genome = "GAAGGCTACGAAGGCTGAAGGCTGCCATCTGGAAGGCTGAAGGCTCCGGGGAAGGCTCGAAGGCTCAATACGCAAAGGAAGGCTGAAGGCTCGCGTGAAGGCTGAAGGCTAGGCGGAAGGCTCGAGATGGAAGGCTGGAAGGCTGAAGGCTGAAGGCTTTTTGAGAAGGCTAGCGAAGGCTAGAAGGCTGAAGGCTTACGAAGGCTCTAGAAGGCTGAAGGCTGAAGGCTACCGATAGAAGGCTGGAAGGCTCAGAAGGCTTGAAGGCTTCTAGAAGGCTCTGAAGGCTGGAAGGCTGAAGGCTCCTAGAAGGCTGAAGGCTTCCTCGAAGGCTTAAGATGAAGGCTACCGAAGGCTTGAAGGCTGGAAGGCTCGGTCGAAGGCTAGAAGGCTCCTGAAGGCTTATTGGAAGGCTTGAAGGCTTGCGAAGGCTGAAGGCTGAAGGCTGGAGAAGGCTGGTAGAAGGCTCGAAGGCTCTGAAGGCTCAGGAAGGCTTGAGAAGGCTACGAAGGCTGAAGGCTACGAAGGCTGAAGGCTTGGAAGGCTTGAAGGCTGAAGGCTACGCGTTGGAAGGCTGATCCGAAGGCTAAGAAGGCTGCCCTTAGAAGGCTGAAGGCTGAAGGCTCAGGACACGGGAAGGCTGAAGGCTGAAGGCTGAAGGCTACCGGGGGGAAGGCTAACAGAAGGCTCGAACGGAAGGCTTCGAAGGCTATCCGAAGGCTGCAGGAAGGCTGAAGGCTGAAGGCTCGAAGGCTGAAGGCTGAAGGCTGAAGAAGGCTGAAGGCTGATGAAGGCTGAAGGCTAGGAAGGCTGCTCAGAAGGCTGAAGGCTTAAGAAGGCTGGGAAGGCTCGAAGGCTACTTTAACCACAGTCGAAGAAGGCTGGAAGGCTGCAGAAGGCTCTATGGAAGGCTTCGAAGGCTGCTGAAGGCTCGTGAAGGCTGGGAAGGCTACACTATGGAAGGCTCCAGATAAAGAAGGCTGAAGGCTCGAAGGCTGAAGGCTGGAAGGCTAGAAGGCTCCCCGCCGAAGGCTGGAAGGCTAAGGAAGGCTGAAGGCTGGAAGGCTGAAGGCTGAAGGCTTTAGAAGGCTCTGAAGGCTGTAGAAGGCTTGTTACGGAAGGCTGAAGGCTTGAAGGCTGAAGGCTCCGAAGGCTGAAGGCTGAAGGCTGGTGCTGAAGGCTATCGAAGAGAAGGCTTGAAGGCTGAAGGCTCGATTGGAAGGCTGAGCAGAAGGCTGAAGGCTGAAGGCTAGAAGGCTGAAGGCTCGGGAAGGCTAAGGAAGGCTCTACGTGAAGGCTGAAGGCTGAAGGCTACACGAAGGCTTGAGTGAGAAGGCTAACTTACGACTGAAGGCTCCAGAAGGCTTGAAGGCTGTCTTTACTATGAAGGCTTCCTTTCGAAGGCTCGATCATTGTACGAAGGCTGAAGGCTGCGCGAAGGCTTCGAAGGCTGGAAGGCTCAGTACACAGCAGAAGGCTGAAGGCTTCCCCTCAACCTCTACGAAGAAGGCTAGAAGGCTAAAGAAGGCTCACGGGGAAGGCTGAAGGCTCAGGAAGGCTGAAGGCTCCGCGAAGGCTCGTCCGAAGGCTGAAGGCTAGCGAAGGCTGAAGGCTTGAAGGCTGCGAAGGCTTGAAGGCTGAAGGCTGAAGGCTTCTTAGAGAGAGAAGGCTAGAGAAGGCTCGAAGGCTGGAAGGCTTGTGAAGGCTCTAGAAGGCTACCGAAGGCTGAAGGCTAAGAAGGCTCTTGAAGGCTTAAGTTCCGAAGGCTCGAAGGCTCAATGAAGGCTCCGAAGGCTAGAAGGCTCGAAGGCTACCACTGAAGGCTAACCCCGAAGGCTTAAGCGAAGGCTCACTCCGAAGGCTGAAGGCTAGCGAAGGCTTGCCTATGAAGGCTTGAAGGCTCGAAGGCTCGTGGAAGGCTCGAAGGCTGCAAGAAGGCTACACATGGAAGGCTTTCAATAGAAGGCTCCGAAGGCTACCGGCTGAAGGCTGTCGCGAAGGCTGAAGGCTGAAGGCTCGAAGGCTGCAGAAGGCTCACTTGTCTAGAAGGCTAAGAAGGCTACGAAGGCTCGAAGGCTAGCGAAGGCTATGTACGAAGGCTGTTAGAAGGCTGAAGGCTGGAAGGCTGTCCCGTGAAGGCTGAAGGCTGAAGGCTCAGTCGTACACGAAGGCTCGAAGGCTAGAAGGCTAGAAGGCTAAGAAGGCTGAAAGAAGGCTGAAGGCTCCAAAGCCAGGAAGGCTGAAGGCTGAAGGCTATGAAGGCTGAAGGCTCTGAAGGCTGGAAGGCTGAAGGCTCGAAGGCTATCGAAGGCTAAACGCATTGAAGGCTAATAGAAGGCTGAAGGCTTGAAGGCTTGCTAGGGAAGGCTTGAAGGCTGGAAGGCTTACGAAGGCTATTTATAACAGGTGAAGGCTACGAAGGCTGGGCGAAGGCTCAAGAAGGCTATGAAGGCTGAAGGCTCGAAGGCTGAAGGCTGGAAGGCTTTGAGACTTTGAAGGCTTGACCGAAGGCTGAAGGCTCGAAGGCTGAAGGCTGAAGGCTTCGGGAAGGCTCGAAGGCTAATAGAAGGCTCCTGGTCGAGGAAGGCTACTAGAAGGCTCTGGCGAAGGCTGAAGGCTGAAGGCTGGAAGGCTTCGAAGGCTGTGAAGGCTGAGTGAGCGAAGGCTTGAAGGCTAGCGAAGGCTGCGAAGGCTACGAAGGCTGAAGGCTCAAAGTCCGCCGCCCGGTCTCCGGGAAGGCTGAAGGCTCCTGAAGGCTATCGAAGGCTAGGAAGGCTCGAAGGCTAAACGGGAAGGCTATCCGAAGGCTGAAGGCTGAAGGCTACGGCCGGATGGGAAGGCTGAAGGCTTGAAGGCTCAGAAGGCTGAAGGCTATGAAGGCTGCCCCGACATTAGAAGGCTCGTCTACGAAGGCTGAAGGCTGAAGGCTGGGGAAGGCTTAGCGGAAGGCTATCAGAAGGCTTGAAGGCTGAAGGCTAATTTGAAGGCTGGAAGGCTCGAGAAGGCTCGCCAGAAGGCTGAAGGCTCGCCTCGTGAAGGCTGCTCGAAGGCTGAAGGCTGAAGGCTCCGAAGGCTGGAAGGCTGGAAGGCTGTTGAAGGCTAGGAAGGCTGGAAGGCTGAAGGCTAGGTAAGAAGGCTGCCCATCTCCTCTGAAGGCTATGGAAGGCTGAAGGCTGGAAGGCTTAGGGCGGAAGGCTGAAGGCTGAAGGCTAGAAGGCTTACCACGAAGGCTAGAAGGCTAGGAAGGCTACGAAGGCTGAAGGCTGAAGGCTACACGAAGGCTGTGAGCAGGAAGGCTGAAGGCTAGAAGGCTGAAGGCTCAGAAGGCTTAAGTGGAAGGCTGATGGAAGGCTGACGAAGGCTATAAATGACGGGGAAGGCTGGAAGGCTTAGGAAGGCTGAAGGCTGAAGGCTAAGAAGGCTCAATCGAAGGCTCTGCCGACGTCTGAAGGCTGAAGGCTGAAGGCTGTGAAGGCTCGAAGGCTGAAGAAGGCTGAAGGCTCGTTCGTGAAGGCTGATGAAGGCTACGTGAAGGCTGGTGGTTATGGAAGGCTTAAGAAGGCTGAAGGCTATAATAACGAAGGCTACTGGTTGAAGGCTTCACTTTTTGGAAGGCTGAAGGCTAAGAAGGCTACGGTGTTGGCGCAGAAGGCTGAAGGCTGAAGGCTCGCGTTCCGACGAAGGCTGAAGGCTGGAAGGCTCGAAGGCTGTGAAGGCTGAAGGCTGAAGGCTCGAAGGCTTATGAGAAGGCTTTCAGAAGGCTTCCCGGAAGGCTTAGAAGGCTACGAAGGCTGGAGAAGGCTATAGGGCTCTAAGTCCGAAGGCTGTGAAGGCTAGCTGAAGGCTAGTGAAGGCTGTTCACACCTGAAGGCTTATCACTGAAGGCTTCCTGAAGGCTACCGAAGGCTAAGGCGAGGAAGGCTGAAACTGAAGGCTAGAAGGCTGAAGGCTTGAAGGCTGAAGGCTGCGAAGGCTGCCTCGGAAGGCTGAGAAGGCTGAAGGCTGAAGGCTGAAGGCTGAAGGCTGAAGGCTTTGAAGGCTGAAGGCTGCCGAAGGCTGTCGAAGGCTTAAGAATGAAGGCTAACAGAAGGCTAGAAGGCTAGTCGAAGGCTGAAGGCTCCCCTAATAAAGAAGGCTTCAAGACAGGAAGGCTGGAAGGCTAAGTGGCGGAAGGCTTTTCTTGAAGGCTGAAGGCTGAGAAGGCTTAGGAAGGCTGGGAAGGCTAAGAAGGCTCAGCGAAGGCTGCTCCTCGGAAGGCTCAGAAGGCTCCGAAGGCTGAAGGCTGAAGGCTGATTTGAAGGCTGAAGGCTGAAGGCTGAGTCGCGAAGGCTACTTGAAGGCTTCTGGAAGGCTTCTCGAAGGCTCGAAGGCTGAAGGCTGGGGAAGGCTATATGGTTATGAAGGCTCGTGAAGGCTTGAAGGCTGAAGGCTGCCCGAAGGCTTGTGAAGGCTGTCTGATGATGTACCAGAAGGCTGTTGAAGGCTGAAGGCTCCTTTGGAAGGCTTGAAGGCTGAGAGAAGGCTCCGAAGGCTGAAGGCTTACAGAAGGCTTGGAAGGCTGAAGGCTGAAGGCTGAAGGCTGAAGGCTATGAAGGCTGAAGGCTTAGAAGGCTTCGAAGGCTGTGAAGGCTAGACAGAAGGCTGAAGGCTCATATGGGAAGGCTGAAGGCTTCTGGAAGGCTTAAGAAGGCTACTTTTTGAAGGCTAAAGAAGGCTCGTGGAAGGCTCCGAAGGCTGGATCGAAGGCTCCGCGGGGGAAGGCTGACTACGTGGAAGGCTGAGAAGGCTGCCCGAAGGCTCCCCCTGAAGGCTTGAAGGCTGAAGGCTGTGAAGGCTTTGAAGGCTGAACGAAGGCTGAAGGCTCGAAGGCTTACGAAGGCTCGAAGGCTTGAAGGCTTGAAGGCTCCTGAAGGCTGCGAAGGCTCGAAGGCTGAAGGCTCTGTCTCCGAAGGCTGTACTCGAAGGCTACGAAGGCTGAAGGCTGGGAAGGCTCCTAGAAGGCTGAAGGCTGAAGGCTATTGAAGGCTGAGGGAAGGCTTCAGGAAGGCTTGCGAAGGCTCCAGAAGGCTTCAAGCCTAAATCTGGAAGGCTAACACGAAGGCTTCCGAAGGCTGCTCGACGAAGGCTGAAGGCTTGCGAAGGCTGAAGGCTCAGTGAAGGCTGGTCGAAGGCTGAAGGCTGAAGGCTACCGAAGGCTATCAAGGAAGGCTGGAAGGCTGCTTTTTTCAAGAAGGCTAGGAAGGCTGAAGGCTTGAAGGCTGAAGGCTCCTACGAAGGCTGAAGGCTCATTCATTGAAGGCTGAAGGCTGAAGGCTCGATGGTTGCGAAGGCTGTGCCTTAAAGAAGGCTGCTGAAGGCTAACCAGAAGGCTCCCGGGGAAGGCTGGCAGAAGAAGGCTGAAGGCTATCAGAAGGCTCGGAAGGCTGAAGGCTGAAGGCTGTGAAGGCTGAAGGCTGGAAGGCTGAAGGCTGCGGCTTGAAGGCTGAAGGCTGCACTCGAAGGCTATAGAAGGCTCGAAGGCTGGAAGGCTGAAGGCTGAAGGCTAATCGAAGGCTAGAAGGCTGGTGAAGGCTCGGTTTCATGAAGGCTGAAGGCTGAAGGCTAAAGGAAGGCTGAAGGCTAGCAGGAAGGCTCCAGAAGGCTGGAAGGCTCGATACTGGGCCAAGAAGGCTGGAAGGCTAGAAGGCTTGAAGGCTCGAAGGCTGGAGAAGGCTGGAAGGCTGAAGGCTGAAGGCTGAAGGCTGGTCGAAGGCTAAAGGAAGGCTCGAAGGCTCCGGGAAGGCTTTAAGAGAAGGCTAGAAGGCTGAAGGCTGGAAGGCTGAAGGCTGCGGAAGGCTGAAGGCTACTATGAAGGCTGCCCGGAAGGCTTTCCAGAAGGCTGAAGGCTTGAAGGCTGAAGGCTAGGAGGTGAAGGCTTAATGAAGGCTTGGAAGGCTATCCGGAAGGCTATACTCCCAAGAAGGCTCCTCTTGGTGATGAAGGCTTAGGAAGGCTGAAGGCTAGCGAAGGCTAGAAGGCTTGAAGGCTGAAGGCTCACCTGGAAGGCTGAAGGCTTCATCACCTCGAAGGCTCTGAAGGCTGAAGGCTGAAGGCTCGCACAGGAAGGCTCCTGAAGGCTTGAAGGCTGGACCGAAGGCTGAAGGCTGAAGGCTGAAGGCTTCTAGAAGGCTTCAGAAGGCTGAAGGCTGAGAAGGCTATACTGAAGGCTCAAGAAGGCTGTCGAGAAGGCTGAAGGCTGAAGGCTGTAGAAGGCTCAGAAGGCTGGAAGGCTACCGGAAGGCTGGTTTCATTTTGCGAAGGCTACGTGAAGGCTTCGGCCGAAGGCTGAAGGCTGGAAGGCTCTGGAAGGCTCCGAAGGCTTGAAGGCTTGAAGGCTACAGGCGAAGGCTGGAAGGCTTCTTGAAGGCTGGGAAGGCTGAGAAGGCTCAGTATTCATTGAAGGCTAGAAGGCTGGAAGGCTGAAGGCTGAAGGCTCGAAGGCTGAAGGCTCTGTCCTTGAAGGCTTCTGAAAGCTAGAAGGCTGAAGGCTCCCGTAGAAGGCTTGGGAAGAAGGCTGCGTGAAGAAGGCTTGAAGGCTCGGAAGGCTAGAAGGCTATGGAAGGCTATAAAATCGAAGGCTATCACTGTTGGAAGGCTTAACACGTAGAAGGCTGAAGGCTTGCGAAGGCTGAAGGCTGAAGGCTTTCACAGTTGAAGGCTGAAGGCTAGTGGCTATTGAAGGCTACTGAAGGCTGTACTCGCTATCACAAGAAGGCTCGGAAGGCTACGAAGGCTAGAAGGCTGAAGGCTCGAGAAGGCTGTGGATCGAAGGCTGAAGGCTATCTTTTCATGAAGGCTACAAAAGAAGGCTGGAAGGCTGAAGGCTGAAGGCTATGAAGGCTTTGAAGGCTCCACGGAAGGCTTAATTAGAGAGAAGGCTTGAAGGCTTGAAGGCTGCATCGAGCGGAGAAGGCTTTCTATTGAAGGCTGAAGGCTAATGAAGGCTAACCGAGTGGAAGGCTGAAGGCTGAAGGCTCTGGAAGGCTGAAGGCTCAGAAGGCTGCGAAGGCTCCGCCGAAGGCTGGAAGGCTACATTAGTGAAGGCTCGAAGGCTGGAAGGCTTCGAGAAGGCTATTGAAGGCTTGAAGGCTGAAGGCTTGTTGAAGGCTGAAGGCTTGGTTTGAAGGCTGAAGGCTCGGAACCCGCCCGGAAGGCTTGAAGGCTGAAGGCTCGAGGCCCGAAGGCTGAAGGCTGAAGGCTTTCGAAGGCTGAAGGCTGAAGGCTTACCCGAAGGCTGGAAGGCTGAAGGCTCGAAGGCTGAAGGCTTCGTGAAGGCTCACGGTCCGAAGGCTCGTTTGAAGGCTATCGCTCTTCGAAGGCTGTCGTGAAGGCTTGTATGTCCAGAGCCTCCGAAGGCTTGAAGGCTAAGTAGAAGGCTTGGAAGGCTGAAGGCTTCGAAGGCTCTCCCTTCTAGGGGATGGAAGGCTCGTATGAAGGCTCTAATCGAAGGCTGAAGGCTCGAAGGCTCTCGAAGGCTGGGAAGGCTAGTCGAAGGCTCGAAGGCTGAAGGCTGAAGGCTGAGAAGGCTCGAAGGCTGGAAGGCTGAAGGCTGAAGGCTGAAGGCTCAGTTGGAAGGCTGACGTTTACTGAAGGCTTGCCGAAGGCTTGAAGGCTCGTCACTGAAGGCTAGCGAAGGCTTGAAGGCTTACAGAAGGCTTAGAAGGCTCTCTAGGGAAGGCTGGAAGGCTGTTAGAAGGCTCTACGCGAAGGCTCTAGCTAGAAGGCTGAAGGCTGAAGGCTGAAGGCTGCGAAGGCTAGGAAGGCTGAAGGCTCATGAAGGCTCGAAGGCTAGGCGCGAAGGCTGGCATGAAGGCTGGACCGGGAAGGGGGAAGGCTGGAAGGCTGTGAAGGCTAGAAGGCTGATCCTACCTAGAAGGCTATAGAAGGCTGAAGGCTCGAAGGCTCTTAGAAGGCTCACTGGAAGGCTGTACGAAGGCTCCCGGTGAAGGCTGAAGGCTTTGAAGGCTGGAAGGCTAGGGGTGAAGGCTCCTGAAGGCTGGAAGGCTACAGAAGGCTGAAGGCTGGAGAAGAAGGCTTGAGAAGGCTAGAAGGCTGAAGGCTCCTGAAGGCTACGAAGGCTGAAGGCTTCCCGGGAAGGCTCTGAAGGCTCGAAGGCTGAAGGCTTAGAAGGCTTAGAAGGCTGAAGGCTGAAGGCTGTTTAGAAGGCTGAAGGCTGGGACGAAGGCTACCTATGAAGGCTGAAGGCTCTGCACCCGCCTGAAGGCTTAGGAAGGCTGAAGGCTTGGGAAGGCTCGGGAGAAGGCTGGAAGGCTTGAAGGCTGAAGGCTATAGAAGGCTTTCGCAACTTACCCGCATGAAGGCTTTCGTTATGAAGGCTGATGGCACGAAGGCTAGAAGGCTGAAGGCTGGAAGGCTTCGAAGGCTATATCGGAAGGCTCGAGCGAAGGCTAGAGTCAGAAGGCTCGAAGGCTTGAACGGTACTAAGAAGGCTTGAAGGCTCGAAGGCTGAAGGCTGGTGAAGGCTGAAGGCTGAAGGCTGGAAGGCTTGACGAAGGCTGAAGGCTTGCCAAGAAGGCTTAAGTCTCGAAGGCTCACGGGGAAGGCTGTTCTTGGAGCTAGGAAGGCTGAAGGCTGCGAAGGCTATGGAAGGCTAGAAGGCTGAAGGCTCGAAGGCTGAAGGCTTTGAAGGCTCGGAAGGCTTACCCACGAAGGCTGGAAGGCTGAGAAGGCTGAAGGCTGGATTCCGAAGGCTGAAGGCTCGGAAGGCTGGGAAGGCTTCGAAGGCTGAAGGCTAGAAGGCTACTCTGAAGGCTGAGGGAAGGCTACAGAAGGCTGAAGGCTCATAAGAAGGCTGAAGGCTGTTATCTTGATGAAGGCTCGAAGGCTGAAGGCTGTCGAAGGCTGAAGGCTCTATTGAAGGCTGAAGGCTAGAAGGCTGAAGGCTAGGAAGGCTTACTGGAAGGCTACATCGAGAAGAAGGCTGAAGGCTGGGCGAAGGCTGAAGGCTCTGTCCGAAGGCTTGCTGAAGGCTCGTCAGAAGGCTGACTCTCTACACGAAGGCTGAAGGCTGCACTGAAGGCTCAGATTCGAAGGCTGAAGGCTAGAAGGCTGAAGGCTTTGAAGAAGGCTACTGTGAAGGCTGTTCGAAGGCTGAAGGCTGGAAGGCTGAAGGCTCGAAGGCTTGGAAGGCTGGAAGGCTATGAAGGCTCGAAGGCTGAAGGCTTGTATTAAGAAGGCTGAAGGCTGAAGGCTCCGGTAGTTCGGCGAAGGCTGAAGGCTACCGGAAGGCTCGAAGGCTCCGAAGGCTTGAAGGCTTGAAGGCTAGAAGGCTCGAACGAAGGCTCAGAAGGCTTCGCAAGAAGGCTTTGAAGGCTGAAGGCTGAAGGCTGCCGCGCGAAGGCTGTTCGCGGTGGGAAGGCTCGAAGGCTCTAGACGAAGGCTGAAGGCTTCGAAGGCTAGAAGGCTCGAAGGCTTGAAGGCTTTTCTGAAGGCTGCCCGAAGGCTGGGAAGGCTTATCGAAGGCTTGATTGTAGAATTTGAAGGCTGGAAGGCTAAGACGGAAGGCTCTAGAAGGCTTGAAGGCTCGAAGGCTTAAGATAGAAGGCTGAAGGCTGCGAAGGCTCTGAGAAGGCTTAGGAAGGCTTGGATCAGGAAGGCTTATCAAAATCGAAGGCTTGCTAGTCATGAAGGCTTACGAAGGCTGAAGGCTGCGAAGGCTAGGAAGGCTGAAGGCTGCGTCGAAGGCTCGAAGGCTGAATGCTAGAGAAGGCTTCCCCAAAGAAGGCTGAAGGCTAGAAGGCTTCTGCGAGGAAGGCTCAGATAGAAGGCTCCGAAGGCTGAATTAAAGAAGGCTGAAGGCTAGAAGGCTGAAGGCTGAAGGCTGAAGGCTGGAAGGCTTTACTAGAAGGCTCAGTATTATTTGAAGGCTTGAAGGCTGTAGAAGGCTGGAAGGCTAGAAGGCTGGAAGGCTAGAAGGCTGAAGGCT"

data = str(PatternMatching(Pattern, Genome))
data = data.replace(',', '')

print(data)

def PatternToNumber(Pattern):
    dict = {'A':"0", 'C':"1", 'G':"2", 'T':"3"}
    PatternNumber = ''
    for i in range(len(Pattern)):
        PatternNumber = PatternNumber + dict[Pattern[i]]
    return PatternNumber



Pattern = "ATGCAA"
data = PatternToNumber(Pattern)

print(data)



def PatternMatching(Pattern, Genome):
    positions = [] # output variable
    for i in range(len(Genome)-len(Pattern)+1):
        if Genome[i:i+len(Pattern)] == Pattern:
            positions.append(i)
    return positions

Pattern ="ATGATCAAG"

Genome = open('Vibrio_cholerae.txt').read().strip()


data = str(PatternMatching(Pattern, Genome))
data = data.replace(',', '')

print(data)

def PatternToNumber (Pattern): #Returns the number of k-mer from the k-mer list
    i = 0
    Number = 0
    while i < len(Pattern):
        if Pattern[i] == 'C':
            Number = Number + 1 * 4 ** (len(Pattern) - i - 1)
        if Pattern[i] == 'G':
            Number = Number + 2 * 4 ** (len(Pattern) - i - 1)
        elif Pattern[i] == 'T':
            Number = Number + 3 * 4 ** (len(Pattern) - i - 1)
        i += 1
    return Number


#returns the symbol array of Genome corresponding to symbol.

def SymbolArray(Genome, symbol):
    array = {}
    n = len(Genome)
    ExtendedGenome = Genome + Genome[0:n//2]
    for i in range(n):
        array[i] = PatternCount(symbol, ExtendedGenome[i:i+(n//2)])
    return array

def FasterSymbolArray(Genome, symbol):
    array = {}
    n = len(Genome)
    ExtendedGenome = Genome + Genome[0:n//2]

    # look at the first half of Genome to compute first array value
    array[0] = PatternCount(symbol, Genome[0:n//2])

    for i in range(1, n):
        # start by setting the current array value equal to the previous array value
        array[i] = array[i-1]

        # the current array value can differ from the previous array value by at most 1
        if ExtendedGenome[i-1] == symbol:
            array[i] = array[i]-1
        if ExtendedGenome[i+(n//2)-1] == symbol:
            array[i] = array[i]+1
    return array
